---

# Requires CentOS 

- name: Role Facts
  set_fact:
    block_device: "/dev/sdb"

- name: Get SELinux state
  shell: getenforce
  register: result

- debug: msg="System reboot required to disable SELinux.  SELinux{{":"}} {{result.stdout}}"
  when: result.stdout != "Disabled"

- name: SELinux Permissive
  selinux:
    state: disabled
  register: selinux_result

- name: Check if EPEL Repo Configured
  stat: path=/etc/yum.repos.d/epel.repo
  register: epel_repofile_result

- name: Install EPEL Repo
  yum:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    state: present
  register: result
  when: not epel_repofile_result.stat.exists

- name: Import EPEL GPG key
  rpm_key:
    key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7
    state: present
  when: not epel_repofile_result.stat.exists

- name: Install RPM
  yum:
    name: yum-utils
  become: true

- name: Add Docker Repo
  shell: |
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  become: true

- name: Install RPM
  yum:
    name: "{{ item }}"
  with_items:
    - device-mapper-persistent-data
    - lvm2
    - bind-utils
    - net-tools
    - fortune-mod
    - cowsay
    - tree
    - docker-ce
    - container-storage-setup
  become: true

#- name: Ugrade All Packages
#  yum:
#    name: '*'
#    state: latest

- name: Disable Service Firewalld
  service:
    name: firewalld
    enabled: no
    state: stopped

#- name: Firewall Ports
#  firewalld:
#    zone: "{{ item.zone }}" 
#    port: "{{ item.port }}"
#    permanent: "{{ item.permanent }}"
#    immediate: "{{ item.immediate }}"
#    state: enabled
#  become: true
#  ignore_errors: true
#  with_items:
#    - { zone: 'public', port: '8080/tcp', permanent: 'true', immediate: 'true' }

- name: Check for LVM Physical Volume "{{ block_device }}"
  shell: pvs | grep "{{ block_device }}"
  register: result
  ignore_errors: true

- name: Configure LVM Thin Pool
  shell: |
    echo DEVS={{ block_device }} >> /etc/sysconfig/docker-storage-setup
    container-storage-setup
  become: true
  when: result.rc != 0

- name: Enable Service Docker
  service:
    name: docker 
    enabled: yes
    state: started

- name: Configure Login Banner
  script: fortune_cowsy.sh 

- name: Copy MOTD
  copy:
    src: motd-cicd.txt
    dest: /etc/motd
    owner: root
    group: root
    mode: 0644
